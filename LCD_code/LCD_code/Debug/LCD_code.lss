
LCD_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ff  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071d  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  0000165c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019a  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  8e:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z12toggleEnablev>:
#include <avr/io.h>


void toggleEnable(){
	//toggling Enable
	PORTC = PORTC | 0b00000100;
  96:	88 b1       	in	r24, 0x08	; 8
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e9       	ldi	r24, 0x9F	; 159
  9e:	9f e0       	ldi	r25, 0x0F	; 15
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <_Z12toggleEnablev+0xa>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_Z12toggleEnablev+0x10>
  a6:	00 00       	nop
	_delay_ms(1);
	PORTC = PORTC & 0b11111011;
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	88 b9       	out	0x08, r24	; 8
  ae:	08 95       	ret

000000b0 <_Z7initLCDv>:
}

void initLCD(){
	// E, RW, RS
	PORTC = PORTC & 0b11111000;
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	88 b9       	out	0x08, r24	; 8
		
	// initializing the display
		
	//display clear
	PORTB = 0b00000001;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	85 b9       	out	0x05, r24	; 5
	toggleEnable();
  ba:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12toggleEnablev>
	//function set
	PORTB = 0b00111000;
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	85 b9       	out	0x05, r24	; 5
	toggleEnable();
  c2:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12toggleEnablev>
	//display on of control
	PORTB = 0b00001111;
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	85 b9       	out	0x05, r24	; 5
	toggleEnable();
  ca:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12toggleEnablev>
	//entry mode set
	PORTB = 0b00000110;
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	85 b9       	out	0x05, r24	; 5
	toggleEnable();
  d2:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12toggleEnablev>
  d6:	08 95       	ret

000000d8 <_Z5printPKch>:
	
}

void print(const char Message[], uint8_t size_){
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	8c 01       	movw	r16, r24
  e2:	d6 2f       	mov	r29, r22
	//writing data
	PORTC &= 0b11111000;
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	88 7f       	andi	r24, 0xF8	; 248
  e8:	88 b9       	out	0x08, r24	; 8
	PORTC |= 0b00000001; //register select 1
  ea:	88 b1       	in	r24, 0x08	; 8
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	88 b9       	out	0x08, r24	; 8
	
	for(uint8_t i = 0; i < size_; ++i ){
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	cd 17       	cp	r28, r29
  f4:	48 f4       	brcc	.+18     	; 0x108 <_Z5printPKch+0x30>
		PORTB = Message[i];
  f6:	f8 01       	movw	r30, r16
  f8:	ec 0f       	add	r30, r28
  fa:	f1 1d       	adc	r31, r1
  fc:	80 81       	ld	r24, Z
  fe:	85 b9       	out	0x05, r24	; 5
		toggleEnable();
 100:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12toggleEnablev>
void print(const char Message[], uint8_t size_){
	//writing data
	PORTC &= 0b11111000;
	PORTC |= 0b00000001; //register select 1
	
	for(uint8_t i = 0; i < size_; ++i ){
 104:	cf 5f       	subi	r28, 0xFF	; 255
 106:	f5 cf       	rjmp	.-22     	; 0xf2 <_Z5printPKch+0x1a>
		PORTB = Message[i];
		toggleEnable();
	}
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	08 95       	ret

00000112 <_Z9setCursorhh>:

void setCursor(uint8_t x, uint8_t y){
	PORTC &= 0b11111000;
 112:	98 b1       	in	r25, 0x08	; 8
 114:	98 7f       	andi	r25, 0xF8	; 248
 116:	98 b9       	out	0x08, r25	; 8
	PORTB = 0b10000000 | (x + 64*y);
 118:	90 e4       	ldi	r25, 0x40	; 64
 11a:	69 9f       	mul	r22, r25
 11c:	80 0d       	add	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	80 68       	ori	r24, 0x80	; 128
 122:	85 b9       	out	0x05, r24	; 5
	toggleEnable();
 124:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12toggleEnablev>
 128:	08 95       	ret

0000012a <_Z5clearv>:
}

void clear(){
	PORTC &= 0b11111000;
 12a:	88 b1       	in	r24, 0x08	; 8
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	88 b9       	out	0x08, r24	; 8
	PORTB = 0b00000001;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	85 b9       	out	0x05, r24	; 5
	toggleEnable();
 134:	0e 94 4b 00 	call	0x96	; 0x96 <_Z12toggleEnablev>
 138:	08 95       	ret

0000013a <main>:

int main(void)
{
    
	//define the data direction
	DDRB = 0b11111111;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0b00000111;
 13e:	87 b1       	in	r24, 0x07	; 7
 140:	87 60       	ori	r24, 0x07	; 7
 142:	87 b9       	out	0x07, r24	; 7
	
	
	
	
	// initializing the display
	initLCD();
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z7initLCDv>
	
	setCursor(2, 0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 89 00 	call	0x112	; 0x112 <_Z9setCursorhh>
	print("Hello There", 6);
 150:	66 e0       	ldi	r22, 0x06	; 6
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z5printPKch>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	87 ea       	ldi	r24, 0xA7	; 167
 15e:	91 e6       	ldi	r25, 0x61	; 97
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x26>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x30>
 16a:	00 00       	nop
	
	_delay_ms(2000);
	clear();
 16c:	0e 94 95 00 	call	0x12a	; 0x12a <_Z5clearv>
	
	setCursor(0, 1);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 89 00 	call	0x112	; 0x112 <_Z9setCursorhh>
	print("Good Bye", 8);
 178:	68 e0       	ldi	r22, 0x08	; 8
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z5printPKch>
 182:	ff cf       	rjmp	.-2      	; 0x182 <main+0x48>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
