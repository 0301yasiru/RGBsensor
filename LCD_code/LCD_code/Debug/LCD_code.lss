
LCD_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008af  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070e  00000000  00000000  00000b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e8  00000000  00000000  0000124d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000449  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a4  00000000  00000000  00001b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001cb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z12toggleEnablev>:
	PORTD |= 0b00000000;
	toggleEnable();
	//display clear
	PORTD &= 0b00001111;
	PORTD |= 0b00000000;
	toggleEnable();
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	88 60       	ori	r24, 0x08	; 8
  84:	8b b9       	out	0x0b, r24	; 11
  86:	8f e9       	ldi	r24, 0x9F	; 159
  88:	9f e0       	ldi	r25, 0x0F	; 15
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <_Z12toggleEnablev+0xa>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_Z12toggleEnablev+0x10>
  90:	00 00       	nop
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	8b b9       	out	0x0b, r24	; 11
  98:	08 95       	ret

0000009a <_Z7initLCDv>:
  9a:	8b b1       	in	r24, 0x0b	; 11
  9c:	83 7f       	andi	r24, 0xF3	; 243
  9e:	8b b9       	out	0x0b, r24	; 11
  a0:	8b b1       	in	r24, 0x0b	; 11
  a2:	8f 70       	andi	r24, 0x0F	; 15
  a4:	8b b9       	out	0x0b, r24	; 11
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8b b9       	out	0x0b, r24	; 11
  ba:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	8b b9       	out	0x0b, r24	; 11
  ca:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	8f 70       	andi	r24, 0x0F	; 15
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	80 6f       	ori	r24, 0xF0	; 240
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	8b b9       	out	0x0b, r24	; 11
 102:	8b b1       	in	r24, 0x0b	; 11
 104:	8b b9       	out	0x0b, r24	; 11
 106:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	8f 70       	andi	r24, 0x0F	; 15
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 66       	ori	r24, 0x60	; 96
 114:	8b b9       	out	0x0b, r24	; 11
 116:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
 11a:	08 95       	ret

0000011c <_Z9setCursorhh>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	9b b1       	in	r25, 0x0b	; 11
 122:	93 7f       	andi	r25, 0xF3	; 243
 124:	9b b9       	out	0x0b, r25	; 11
 126:	c8 2f       	mov	r28, r24
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	68 9f       	mul	r22, r24
 12e:	c0 0d       	add	r28, r0
 130:	d1 1d       	adc	r29, r1
 132:	11 24       	eor	r1, r1
 134:	c0 68       	ori	r28, 0x80	; 128
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	9c 2f       	mov	r25, r28
 140:	90 7f       	andi	r25, 0xF0	; 240
 142:	89 2b       	or	r24, r25
 144:	8b b9       	out	0x0b, r24	; 11
 146:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	c2 95       	swap	r28
 154:	d2 95       	swap	r29
 156:	d0 7f       	andi	r29, 0xF0	; 240
 158:	dc 27       	eor	r29, r28
 15a:	c0 7f       	andi	r28, 0xF0	; 240
 15c:	dc 27       	eor	r29, r28
 15e:	c8 2b       	or	r28, r24
 160:	cb b9       	out	0x0b, r28	; 11
 162:	0e 94 40 00 	call	0x80	; 0x80 <_Z12toggleEnablev>
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <main>:

int main(void)
{
    
	//define the data direction
	DDRD = DDRD | 0b00111111; 
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	8f 63       	ori	r24, 0x3F	; 63
 170:	8a b9       	out	0x0a, r24	; 10
	
	initLCD(); // initializing the LCD display
 172:	0e 94 4d 00 	call	0x9a	; 0x9a <_Z7initLCDv>
	setCursor(2, 1);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z9setCursorhh>
 17e:	ff cf       	rjmp	.-2      	; 0x17e <main+0x12>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
